#!/usr/bin/env ruby
require 'rubygems'
require 'commander'
require 'parallel'
require 'net/http'
require 'mathnet/crawler'
require 'exponential_backoff'

require 'pry'

class MathnetApplication
  include Commander::Methods

  def run
    program :name, 'Mathnet crawler.'
    program :version, Mathnet::Crawler::VERSION
    program :description, 'Command that act like missed mathnet client.'
    
    command :'download all' do |c|
      c.syntax = 'download all'
      c.description = 'Download all articals'
      c.action do |args, options|
        journals = list_journals
        issues = list_issues journals
        articles = list_articals issues
        if not Dir.exist? 'mathnet'
          Dir.mkdir 'mathnet'
        end
        download_aricles articles
      end
    end

    command :journals do |c|
      c.syntax = 'journals'
      c.description = 'List journals on mathnet.'
      c.action do |args, options|
        journals = list_journals
        journals.each do |journal|
          say journal.title
        end
      end
    end
    run!
  end

  def list_journals
    process_backoff do 
      Mathnet::Crawler::Journal.list Mathnet::Crawler::Library.new
    end
  end

  def list_issues(journals)
    issues_lists = Parallel.map(journals, :progress => 'List issues') do |journal|
      process_backoff do 
        Mathnet::Crawler::Issue.list journal
      end
    end
    issues_lists.reduce do |initial, item|
      initial + item
    end
  end

  def list_articals(issues)
    articals_lists = Parallel.map(issues, :progress => 'List articals') do |issue| 
      process_backoff do 
        Mathnet::Crawler::Article.list issue
      end
    end
    articals_lists.reduce do |initial, item|
      if not item
        return initial
      end
      initial + item
    end
  end

  def download_aricles(articles)
    Parallel.each(articles, :progress => 'Download texts') do |article|  
      pdf_path = File.join 'mathnet', "#{article.title}.pdf"
      process_backoff do 
        article.full_text do |body|
          pdf = File.new pdf_path, 'w'
          pdf.write body
          pdf.close
        end
      end
    end
  end

  def process_backoff(&block)
    backoff.until_success do
      begin
        result = block.call()
      rescue Net::HTTPServerException
        result = false 
      end
      return result
    end
  end

  def backoff
    minimal_interval = 0.1
    maximal_elapsed_time = 60.0
    ExponentialBackoff.new minimal_interval, maximal_elapsed_time
  end
end

MathnetApplication.new.run if $PROGRAM_NAME == __FILE__
